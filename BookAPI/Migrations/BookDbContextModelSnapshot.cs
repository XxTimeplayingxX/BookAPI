// <auto-generated />
using System;
using BookAPI.DATA;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookAPI.Migrations
{
    [DbContext(typeof(BookDbContext))]
    partial class BookDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookAPI.MODELS.Cliente", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("NombreCompleto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            NombreCompleto = "Juan Pérez",
                            email = "juan@gmail.com"
                        },
                        new
                        {
                            ID = 2,
                            NombreCompleto = "María García",
                            email = "maria@gmail.com"
                        });
                });

            modelBuilder.Entity("BookAPI.MODELS.Genero", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LibroID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("LibroID");

                    b.ToTable("Generos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Descripcion = "Libros de misterio y suspenso",
                            LibroID = 1,
                            Name = "Misterio"
                        },
                        new
                        {
                            ID = 2,
                            Descripcion = "Libros con elementos de fantasía en un contexto realista",
                            LibroID = 2,
                            Name = "Realismo mágico"
                        });
                });

            modelBuilder.Entity("BookAPI.MODELS.GeneroDetalle", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("GeneroID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GeneroID");

                    b.ToTable("GeneroDetalles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            GeneroID = 1
                        },
                        new
                        {
                            ID = 2,
                            GeneroID = 2
                        });
                });

            modelBuilder.Entity("BookAPI.MODELS.Libro", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Autor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Publicacion")
                        .HasColumnType("datetime2");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("libros");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Autor = "Dan Brown",
                            Publicacion = new DateTime(2003, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Titulo = "El código Da Vinci"
                        },
                        new
                        {
                            ID = 2,
                            Autor = "Gabriel García Márquez",
                            Publicacion = new DateTime(1967, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Titulo = "Cien años de soledad"
                        });
                });

            modelBuilder.Entity("BookAPI.MODELS.Pedido", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ClienteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaPedido")
                        .HasColumnType("datetime2");

                    b.Property<int>("LibroID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ClienteID");

                    b.HasIndex("LibroID");

                    b.ToTable("Pedidos");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ClienteID = 1,
                            FechaPedido = new DateTime(2024, 2, 9, 23, 42, 9, 287, DateTimeKind.Local).AddTicks(1565),
                            LibroID = 1
                        },
                        new
                        {
                            ID = 2,
                            ClienteID = 2,
                            FechaPedido = new DateTime(2024, 2, 2, 23, 42, 9, 287, DateTimeKind.Local).AddTicks(1577),
                            LibroID = 2
                        });
                });

            modelBuilder.Entity("BookAPI.MODELS.Genero", b =>
                {
                    b.HasOne("BookAPI.MODELS.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");
                });

            modelBuilder.Entity("BookAPI.MODELS.GeneroDetalle", b =>
                {
                    b.HasOne("BookAPI.MODELS.Genero", "Genero")
                        .WithMany()
                        .HasForeignKey("GeneroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genero");
                });

            modelBuilder.Entity("BookAPI.MODELS.Pedido", b =>
                {
                    b.HasOne("BookAPI.MODELS.Cliente", "cliente")
                        .WithMany()
                        .HasForeignKey("ClienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BookAPI.MODELS.Libro", "Libro")
                        .WithMany()
                        .HasForeignKey("LibroID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Libro");

                    b.Navigation("cliente");
                });
#pragma warning restore 612, 618
        }
    }
}
